<project name="org.nuxeo.ecm.rcp.sdk.releng" default="all" basedir="." xmlns:artifact="antlib:org.apache.maven.artifact.ant">

    <!-- load up the properties for cruise agents based on their hostnames, if available -->
    <exec executable="hostname" outputproperty="hostname" />
    <property file="host-conf/build.${hostname}.properties" />

    <!-- Load up the basic properties -->
    <property file="build.developer.properties" />

    <!-- Load up the eclipse version specific properties -->
    <available file="build-conf/e${eclipse.version}.properties" property="eclipse-conf-available" />
    <fail unless="eclipse-conf-available" message="Could not find file 'build-conf/e${eclipse.version}.properties'" />
    <property file="build-conf/e${eclipse.version}.properties" />

    <!-- Load up the platform specific properties -->
    <available file="build-conf/${os}.${ws}.${arch}.properties" property="build-conf-available" />
    <fail unless="build-conf-available" message="Could not find file 'build-conf/${os}.${ws}.${arch}.properties'" />
    <property file="build-conf/${os}.${ws}.${arch}.properties" />

    <!-- Load up the ecf specific properties -->
    <available file="build-conf/ecf.properties" property="ecf-conf-available" />
    <fail unless="ecf-conf-available" message="Could not find file 'build-conf/ecf.properties'" />
    <property file="build-conf/ecf.properties" />

    <!-- Load up the swtbot specific properties -->
    <available file="build-conf/swtbot.properties" property="swtbot-conf-available" />
    <fail unless="swtbot-conf-available" message="Could not find file 'build-conf/swtbot.properties'" />
    <property file="build-conf/swtbot.properties" />

    <property file="build.default.properties" />
    <import file="check-prerequisites.xml" />

    <property name="plugin.version.primary" value="2.0.0" />

    <!-- automagically generate build numbers from svn -->
    <property name="hg.version" value="1" />
    <property name="plugin.suffix" value="${hg.version}-dev-${eclipse.qualifier}" />
    <property name="buildId" value="${plugin.suffix}" />
    <property name="eclipse-target" value="${basedir}/../eclipse" />

    <property name="all.buildId" value="${plugin.version.primary}.${plugin.suffix}" />

    <property name="plugin.prefix" value="org.nuxeo.ecm.rcp" />

    <property name="feature.id" value="org.nuxeo.apogee.sdk.feature" />
    <property name="feature.id.test" value="${feature.id}.test" />

    <property name="eclipse-platform-properties" value="-Dosgi.ws=${ws} -Dosgi.os=${os} -Dosgi.arch=${arch} -Dws=${ws} -Dos=${os} -Darch=${arch}" />

    <property name="eclipse.3.4.location" value="${basedir}/eclipse" />

    <target name="distclean" depends="clean" description="cleans the output folders">
        <delete dir="javadoc" />
        <delete dir="target" />
        <delete failonerror="false" includeemptydirs="true">
            <fileset dir="externals">
                <include name="**eclipse**/**/**.*" />
                <include name="nuxeo-sdk/**/**.*" />
            </fileset>
        </delete>
    </target>

    <target name="clean" description="cleans the output folders">
        <echo>Cleaning all in ${buildDirectory}</echo>
        <delete failonerror="false" includeemptydirs="true">
            <fileset dir="${buildDirectory}">
                <exclude name="plugins/**/**.*" />
                <exclude name="features/**/**.*" />
            </fileset>
        </delete>
        <delete dir="artifacts" />
        <delete dir="test-sandbox/results" />
        <delete dir="test-sandbox/test-eclipse" />
        <delete dir="test-sandbox/screenshots" />
    </target>

    <target name="copy-sources" depends="copy-features, copy-plugins, create-version-files" description="copies sources" />

    <target name="create-version-files" description="create a java file containing the version number of nuxeo-apogee and other information">
        <!--
        <copy filtering="true" overwrite="true" file="../org.eclipse.swtbot.swt.finder/src/org/eclipse/swtbot/swt/finder/SWTBotInfo.java" tofile="target/plugins/org.eclipse.swtbot.swt.finder/src/org/eclipse/swtbot/swt/finder/SWTBotInfo.java">
            <filterset>
                <filter token="hg.version" value="${all.buildId}"/>
            </filterset>
        </copy>
        -->
    </target>

    <target name="copy-eclipse" description="copies an eclispse instance to a temporary location">
        <echo>Sync eclipse from ${base} to ${eclipse-target}</echo>
        <sync todir="${eclipseLocation}" includeemptydirs="true">
            <fileset dir="${base}" />
            <!-- any other locations/plugins that you want to copy from, in addition to the eclipse "base install"
            <fileset dir="${mylyn.base}" />
            -->
        </sync>
    </target>

    <target name="copy-features" description="copies the feature sources into the features folder">
        <delete dir="${buildDirectory}/features" includes="**/feature.xml"/>
        <sync todir="${buildDirectory}/features" includeemptydirs="true">
            <fileset dir="../../features">
                <!-- list all your features here -->
                <include name="${feature.id}/**" />
                <include name="${feature.id.test}/**" />

                <!-- Nuxeo RCP Features -->
                <include name="org.nuxeo.*.feature/**" />
            </fileset>
        </sync>
    </target>

    <target name="copy-plugins" description="copies plugin sources into the plugins folder">
        <delete dir="${buildDirectory}/plugins" includes="**/MANIFEST.MF" />
        <delete dir="${buildDirectory}/plugins" includes="**/build.properties" />
        <delete dir="${buildDirectory}/plugins" includes="**/.classpath" />
        <delete dir="${buildDirectory}/plugins" includes="**/.project" />
        <sync todir="${buildDirectory}/plugins" includeemptydirs="true">
            <fileset dir="../../plugins">
                <!-- include plugins here -->
                <include name="${plugin.prefix}*/**" />

                <!-- also exclude the generated class files -->
                <exclude name="*/bin/**" />
            </fileset>
        </sync>
    </target>

    <!-- <target name="make-substitutions" /> REMOVED (see swtbot build.xml) -->

    <target name="extract-eclipse">
        <condition property="setupTarget" value="setup-zip">
            <contains string="${eclipse.sdk.archive}" substring=".zip" />
        </condition>
        <condition property="setupTarget" value="setup-tar.gz">
            <contains string="${eclipse.sdk.archive}" substring=".tar.gz" />
        </condition>
        <antcall target="${setupTarget}" />
    </target>

    <!--setup for zip archives-->
    <target name="setup-zip" description="Reinstall the test Eclipse installation if specified by user">
        <unzip dest="${eclipse-target}" src="externals/${eclipse.sdk.archive}">
            <mapper type="glob" from="eclipse/*" to="${eclipse-target}/*" />
        </unzip>
    </target>

    <!--setup for tar.gz archives-->
    <target name="setup-tar.gz" description="Reinstall the test Eclipse installation if specified by user">
        <exec command="tar" failifexecutionfails="true" failonerror="true">
            <arg line="-zxf externals/${eclipse.sdk.archive} -C ${eclipse-target}/.." />
        </exec>
    </target>

    <target name="materialize-condition">
      <available file="${eclipse-target}" property="eclipse-target.available"/>
      <available file="../target-platform" property="target-platform.available"/>
    </target>

    <import file="materialize-target-platform.xml" />

    <target name="materialize-workspace" description="Materializes a workspace for eclipse" depends="materialize-condition,materialize-eclipse,materialize-target-platform" />

    <target name="materialize-eclipse" description="Materializes an eclipse" depends="download-dependencies" unless="eclipse-target.available">
        <echo>Materializing ${eclipse-target}"</echo>

        <mkdir dir="${eclipse-target}" />

        <antcall target="extract-eclipse" />

        <unzip dest="${eclipse-target}" src="externals/${eclipse.delta-pack.archive}">
            <mapper type="glob" from="eclipse/*" to="${eclipse-target}/*" />
        </unzip>

        <unzip dest="${eclipse-target}" src="externals/${eclipse.ecf.sdk.archive}">
            <mapper type="glob" from="eclipse/*" to="${eclipse-target}/*" />
        </unzip>

        <antcall target="initialize-environment" />
    </target>

    <target name="printjvm">
        <exec command="java -version" />
        <echoproperties prefix="java." />
    </target>

    <target name="init" depends="check-conditions, initialize-environment, printjvm, clean" description="initializes the build directory structure">
        <mkdir dir="${buildDirectory}" />
        <mkdir dir="artifacts" />
        <mkdir dir="${buildDirectory}/plugins" />
        <mkdir dir="${buildDirectory}/features" />
    </target>

    <target name="pde-build" depends="copy-all" description="runs the pde build">
        <java classname="org.eclipse.equinox.launcher.Main" fork="true" failonerror="true" dir="${basedir}">

	    <!--jvmarg value="-Xdebug"/-->
	    <!--jvmarg value="-Xrunjdwp:transport=dt_socket,address=8787,server=y,suspend=y"/-->

            <arg value="-application" />
            <arg value="org.eclipse.ant.core.antRunner" />
            <arg value="-buildfile" />
            <arg value="${eclipse-target}/plugins/org.eclipse.pde.build_${pdeBuildPluginVersion}/scripts/build.xml" />
            <arg value="-Dtimestamp=${timestamp}" />
            <arg value="-DbuildId=${all.buildId}" />
            <arg value="-DforceContextQualifier=${plugin.suffix}" />

            <arg value="-Dbaseos=${os}" />
            <arg value="-Dbasews=${ws}" />
            <arg value="-Dbasearch=${arch}" />

            <arg value="-Dbuilder=${basedir}" />
            <arg value="-Dbasedir=${basedir}" />
            <arg value="-Dbuild_directory=${buildDirectory}" />
            <classpath>
                <fileset dir="${eclipse-target}/plugins">
                    <include name="org.eclipse.equinox.launcher_*.jar" />
                </fileset>
            </classpath>
        </java>

        <copy todir="artifacts" overwrite="true" verbose="true">
            <!-- this is the generated artifact -->
            <fileset dir="${buildDirectory}/${buildType}.${all.buildId}">
                <!-- one zip file for each of the feature that you have built -->
                <include name="*.zip" />
            </fileset>
        </copy>

        <antcall target="verify-generated-artifacts" />
    </target>

    <target name="verify-generated-artifacts" description="check if the artifacts are compliant with the legal docs ...">
        <delete dir="target/check-licenses" />
        <unzip dest="target/check-licenses" src="artifacts/${feature.id}-${all.buildId}.zip" />

        <for param="feature-jar">
            <dirset dir="target/check-licenses/eclipse/features" includes="*" />
            <sequential>
                <echo>Verifying feature @{feature-jar}</echo>

                <available file="@{feature-jar}/feature.xml" property="feature.xml.available" />
                <fail unless="feature.xml.available" message="feature.xml for feature @{feature-jar} is not available" />

                <!-- Note, these should exist if apogee is released under EPL as stated in the apogee java headers -->

                <!--
                <available file="@{feature-jar}/license.html" property="license.html.availble" />
                <fail unless="license.html.availble" message="license.html for feature @{feature-jar} is not available" />

                <available file="@{feature-jar}/epl-v10.html" property="epl-v10.html.available" />
                <fail unless="epl-v10.html.available" message="epl-v10.html for feature @{feature-jar} is not available" />
                -->
            </sequential>
        </for>

        <for param="plugin-jar">
            <fileset dir="target/check-licenses/eclipse/plugins" includes="org.eclipse.*" />
            <sequential>
                <echo>Verifying plugin @{plugin-jar}</echo>

                <!-- Note, these should exist if apogee is released under EPL as stated in the apogee java headers -->

                <!--
                <available classpath="@{plugin-jar}" resource="about.html" ignoresystemclasses="false" property="about.html.available" />
                <fail unless="about.html.available" message="about.html for plugin @{plugin-jar} is not available" />

                <available classpath="@{plugin-jar}" resource="LICENSE.EPL" ignoresystemclasses="false" property="LICENSE.EPL.available" />
                <fail unless="LICENSE.EPL.available" message="LICENSE.EPL for plugin @{plugin-jar} is not available" />
                -->
            </sequential>
        </for>
    </target>

    <target name="maven-deploy" description="deploy generated artfact" depends="check-maven-ant-tasks">
        <available file="artifacts/${feature.id}-${all.buildId}.zip" property="build.artifacts.available" />
        <fail unless="build.artifacts.available">Requires built artifact, run ant</fail>

        <artifact:pom id="maven.pom" 
		groupId="org.nuxeo.apogee" 
		artifactId="nuxeo-apogee-sdk" 
		version="5.3.2-SNAPSHOT"
		name="Nuxeo Apogee SDK"
		packaging="zip">
		<license name="nuxeo" url="http://www.nuxeo.org" />
	</artifact:pom>

	<artifact:writepom pomRefId="maven.pom" file="artifacts/pom.xml" />

	<artifact:pom id="maven.project" file="artifacts/pom.xml" />

	<artifact:install file="artifacts/${feature.id}-${all.buildId}.zip">
		<pom refid="maven.project" />
	</artifact:install>

    </target>

    <target name="javadoc" description="generate javadocs">
        <ant antfile="javadoc.xml" />
    </target>

    <target name="copy-all" depends="init, copy-sources" description="copies eclipse sources" />

    <target name="all" depends="init, copy-all, pde-build, javadoc, maven-deploy" description="the default target" />

    <!--
    <target name="create-update-site">
        <delete dir="${basedir}/artifacts/update-site" />
        <property name="update.site.base.url" value="" />
        <property name="has.archives" value="false" />
        <ant dir="../${plugin.prefix}.updatesite" inheritall="false">
            <property name="eclipse.location" value="${eclipse.3.4.location}" />
            <property name="buildId" value="${all.buildId}" />
            <property name="update-site-location" value="${update-site-location}" />
            <property name="has.archives" value="${has.archives}" />
            <property name="update.site.base.url" value="${update.site.base.url}" />
        </ant>
    </target>
    -->
</project>
